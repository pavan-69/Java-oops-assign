1. The technique of creating a new class by using an existing class functionality is called inheritance in Java.
In other words, inheritance is a process where a child class acquires all the properties and behaviours of the
parent class.

2. A class from where a subclass inherits features is called superclass. It is also called base class or parent
class.
A class that inherits all the members (fields, method, and nested classes) from another class is called a
subclass. It is also called a derived class, child class, or extended class.

3. Inheritance can be implemented or achieved by using two keywords:
extends: extends is a keyword that is used for developing the inheritance between two classes and two
interfaces.
implements: implements keyword is used for developing the inheritance between a class and interface.

4. Polymorphism in OOP is the ability of an entity to take several forms. In other words, it refers to the ability of
an object (or a reference to an object) to take different forms of objects. It allows a common data-gathering
message to be sent to each class. Polymorphism encourages

5. overriding :
   1.implements "runtime polymorphism"
   2.The method call is determined at runtime based on the object type
   3.occurs between superclass and subclass

 overloading :
   1.implements "compile time polymorphism"
   2.The method call is determined at compile time
   3.occurs between the methods in the same class

6. Abstraction is nothing but the quality of dealing with ideas rather than events. It basically deals with hiding
the internal details and showing the essential things to the user.
Abstract class Sports { // abstract class sports
Abstract void jump(); // abstract method
}


7. Ans: The abstract method is incomplete while the final method is regarded as complete. The only way to use
an abstract method is by overriding it, but you cannot override a final method in Java.


8. Ans: A class declared with the final keyword is known as the final class. A final class can’t be inherited by
subclasses. By using the final class, we can restrict the inheritance of the class. We can create a class as a final
class only if it is complete in nature, which means it must not be an abstract class. In java, all the wrapper
classes are final classes like String, Integer, etc.
If we try to inherit a final class, then the compiler throws an error at compilation time. We can’t create a class as
immutable without the final class.
final class ParentClass
{
void showData()
{
System.out.println("This is a method of final Parent class");
}
}
//It will throw compilation error
class ChildClass extends ParentClass
{
void showData()
{
System.out.println("This is a method of Child class");
}
}
class MainClass
{
public static void main(String arg[])
{
ParentClass obj = new ChildClass();
obj.showData();
}
}

9. Abstraction :
  1.it solves an issue at the design level
  2.it focuses on the external lookout
  3.it is the process of gaining information

 Encapsulation :
 1.Encapsulation solves an issue at implementation level
 2.it focus on internal working
 3.it is the process of containing the information

10. Compile time polymorphism :
    1.inheritance is not allowed
    2.it is also known as static binding,early binding and overloading as well
   
   Runtime polymorphism :
    1.inheritance is involved
    2.it is also known as dynamic binding ,late binding and overriding as well
